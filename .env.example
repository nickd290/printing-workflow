# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# PostgreSQL (Production/Team Development with Docker)
# Start with: pnpm docker:up
DATABASE_URL="postgresql://postgres:postgres@localhost:5432/printing_workflow?schema=public"

# Railway Production (Auto-provided by Railway PostgreSQL plugin)
# DATABASE_URL will be automatically injected by Railway - no need to set manually

# SQLite (Local Development Only - NOT for Production)
# Uncomment for SQLite:
# DATABASE_URL="file:./packages/db/prisma/dev.db"
# Note: Also update packages/db/prisma/schema.prisma provider to "sqlite"

# =============================================================================
# REDIS CONFIGURATION (Required for Background Workers)
# =============================================================================

# Redis connection details (Docker default)
REDIS_HOST="localhost"
REDIS_PORT="6379"
REDIS_URL="redis://localhost:6379"

# Production Redis (Railway, Upstash, Redis Cloud, etc.)
# REDIS_URL="redis://username:password@host:port"

# Optional: If not set, background workers (email, PDF) will be disabled

# =============================================================================
# FILE UPLOAD CONFIGURATION
# =============================================================================

# Local file storage directory (Railway-compatible with volume)
UPLOAD_DIR="./uploads"

# Note: Files are stored on disk. For Railway deployment:
# - Development: Files stored in container (temporary, lost on restart)
# - Production Option 1: Add Railway volume for persistent storage ($10/month for 100GB)
#   - Railway Dashboard → Service → Add Volume → Mount path: /app/uploads
# - Production Option 2: Use container storage for non-critical files
# - Files are organized by type: uploads/artwork/, uploads/proofs/, uploads/invoices/, etc.

# =============================================================================
# AUTHENTICATION CONFIGURATION
# =============================================================================

# NextAuth Configuration
# NEXTAUTH_URL is your application's base URL
NEXTAUTH_URL="http://localhost:5175"

# Production (Railway):
# NEXTAUTH_URL="https://your-app-name.up.railway.app"

# NextAuth Secret - REQUIRED
# Generate with: openssl rand -base64 32
# IMPORTANT: Use different secrets for dev and production
NEXTAUTH_SECRET="your-secret-here-generate-with-openssl-rand-base64-32"

# Production: Generate new secret with: openssl rand -base64 32
# Example: NEXTAUTH_SECRET="8X7fK2...generated-secret...9pQm"

# =============================================================================
# EMAIL SERVICE CONFIGURATION (Optional but Recommended)
# =============================================================================

# Primary: Resend (Recommended for new projects)
# Get API key from: https://resend.com
# RESEND_API_KEY="re_your_api_key_here"

# Fallback: SendGrid (Legacy support)
# Get API key from: https://app.sendgrid.com/settings/api_keys
SENDGRID_API_KEY="SG.your-api-key-here"

# Email Sender Configuration
EMAIL_FROM="noreply@yourdomain.com"
EMAIL_FROM_NAME="Your Company Name"

# Development: Redirect all emails to a test address
# Leave empty or remove in production to send to actual recipients
EMAIL_REDIRECT_TO="your-test-email@example.com"

# Note: Application tries Resend first, falls back to SendGrid if Resend fails
# If neither is configured, email features will be disabled

# =============================================================================
# API CONFIGURATION
# =============================================================================

# API Server Configuration
API_URL="http://localhost:3001"
API_PORT="3001"

# Production (Railway):
# API_URL will be your Railway API service URL
# API_PORT is automatically set by Railway ($PORT variable)
# Example: API_URL="https://printing-workflow-api.up.railway.app"

# =============================================================================
# API SECURITY
# =============================================================================

# API Secret Key for internal/external API authentication
# Generate with: openssl rand -base64 32
# Used for X-API-Key header authentication
API_SECRET_KEY="your-api-secret-key-here"

# Webhook Secret for validating webhook signatures
# Generate with: openssl rand -base64 32
WEBHOOK_SECRET="your-webhook-secret-here"

# IMPORTANT: Use different secrets for dev and production

# =============================================================================
# WEB APP CONFIGURATION
# =============================================================================

# Public API URL (exposed to browser)
# IMPORTANT: Must match API_URL for the environment
NEXT_PUBLIC_API_URL="http://localhost:3001"

# Production (Railway):
# Set this to your Railway API service public URL
# Example: NEXT_PUBLIC_API_URL="https://printing-workflow-api.up.railway.app"

# Note: NEXT_PUBLIC_* variables are exposed to the browser
# Never put secrets in NEXT_PUBLIC_* variables

# =============================================================================
# OPENAI INTEGRATION (Optional - for AI-powered features)
# =============================================================================

# OpenAI API Key for AI-powered PDF parsing and text extraction
# Get your key from: https://platform.openai.com
# If not set, basic PDF parsing will be used instead
OPENAI_API_KEY="sk-your-key-here"

# Note: OpenAI charges per token - monitor usage in OpenAI dashboard

# =============================================================================
# ENVIRONMENT
# =============================================================================

# Application environment
# Options: "development" | "production" | "test"
NODE_ENV="development"

# =============================================================================
# CONFIGURATION CHECKLIST
# =============================================================================
#
# Minimal Setup (No Docker):
#   ✓ DATABASE_URL (use SQLite)
#   ✓ NEXTAUTH_URL
#   ✓ NEXTAUTH_SECRET
#   ✓ API_SECRET_KEY
#   ✓ NEXT_PUBLIC_API_URL
#
# Full Setup (With Docker):
#   ✓ All minimal requirements
#   ✓ REDIS_URL
#   ✓ S3 configuration (MinIO or AWS)
#   ✓ Email service (Resend or SendGrid)
#   ✓ WEBHOOK_SECRET
#
# Optional:
#   □ OPENAI_API_KEY (for AI features)
#   □ EMAIL_REDIRECT_TO (for testing)
#
# =============================================================================
# QUICK START
# =============================================================================
#
# 1. Copy this file: cp .env.example .env
# 2. Generate secrets:
#    NEXTAUTH_SECRET: openssl rand -base64 32
#    API_SECRET_KEY: openssl rand -base64 32
#    WEBHOOK_SECRET: openssl rand -base64 32
# 3. Configure email service (optional)
# 4. Start Docker: pnpm docker:up (if using PostgreSQL/Redis/MinIO)
# 5. Initialize DB: pnpm db:generate && pnpm db:push && pnpm db:seed
# 6. Start app: pnpm dev:all
#
# For detailed setup instructions, see: docs/QUICK_START.md
# For configuration details, see: docs/CONFIGURATION.md
#
# =============================================================================
