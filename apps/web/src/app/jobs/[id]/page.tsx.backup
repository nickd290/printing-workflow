'use client';

import { Navigation } from '@/components/navigation';
import { useState, useEffect } from 'react';
import { jobsAPI, proofsAPI, purchaseOrdersAPI, APIError } from '@/lib/api-client';

interface Proof {
  id: string;
  version: number;
  status: string;
  createdAt: string;
  file?: {
    fileName: string;
  };
  approvals?: Array<{
    comments?: string;
  }>;
}

interface Job {
  id: string;
  jobNo: string;
  customer: { name: string } | string;
  customerTotal: number;
  status: string;
  createdAt: string;
  specs: Record<string, any>;
}

interface PurchaseOrder {
  id: string;
  originCompany: { name: string };
  targetCompany: { name: string };
  vendorAmount: number;
  marginAmount: number;
  status: string;
  createdAt: string;
}

export default function JobDetailPage({ params }: { params: { id: string } }) {
  const [activeTab, setActiveTab] = useState('details');
  const [showApprovalModal, setShowApprovalModal] = useState(false);
  const [showChangesModal, setShowChangesModal] = useState(false);
  const [selectedProof, setSelectedProof] = useState<Proof | null>(null);
  const [changeComments, setChangeComments] = useState('');
  const [job, setJob] = useState<Job | null>(null);
  const [proofs, setProofs] = useState<Proof[]>([]);
  const [purchaseOrders, setPurchaseOrders] = useState<PurchaseOrder[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadJobData();
  }, [params.id]);

  const loadJobData = async () => {
    try {
      setLoading(true);
      setError(null);

      // Load job details
      const jobData = await jobsAPI.getById(params.id);
      setJob(jobData);

      // Load proofs for this job
      const proofsData = await proofsAPI.listByJob(params.id);
      setProofs(proofsData.proofs);

      // Load purchase orders for this job
      const posData = await purchaseOrdersAPI.list({ jobId: params.id });
      setPurchaseOrders(posData.purchaseOrders);
    } catch (err) {
      console.error('Failed to load job data:', err);
      setError('Failed to load job data. Make sure the API is running on port 3001.');
    } finally {
      setLoading(false);
    }
  };

  const handleApproveClick = (proof: Proof) => {
    setSelectedProof(proof);
    setShowApprovalModal(true);
  };

  const handleRequestChangesClick = (proof: Proof) => {
    setSelectedProof(proof);
    setShowChangesModal(true);
  };

  const handleConfirmApproval = async () => {
    if (!selectedProof) return;

    try {
      await proofsAPI.approve(
        selectedProof.id,
        'demo@example.com', // Hardcoded for demo - should come from auth
        undefined
      );

      // Reload job data to get updated status
      await loadJobData();

      setShowApprovalModal(false);
      setSelectedProof(null);
    } catch (err) {
      console.error('Failed to approve proof:', err);
      setError('Failed to approve proof. Please try again.');
    }
  };

  const handleSubmitChanges = async () => {
    if (!selectedProof || !changeComments) return;

    try {
      await proofsAPI.requestChanges(
        selectedProof.id,
        'demo@example.com', // Hardcoded for demo - should come from auth
        changeComments
      );

      // Reload job data to get updated status
      await loadJobData();

      setShowChangesModal(false);
      setSelectedProof(null);
      setChangeComments('');
    } catch (err) {
      console.error('Failed to request changes:', err);
      setError('Failed to request changes. Please try again.');
    }
  };

  const getCustomerName = (customer: Job['customer']): string => {
    if (typeof customer === 'string') return customer;
    return customer?.name || 'Unknown';
  };

  const tabs = [
    { id: 'details', name: 'Details' },
    { id: 'proofs', name: 'Proofs', badge: proofs.length },
    { id: 'files', name: 'Files' },
    { id: 'pos', name: 'Purchase Orders' },
    { id: 'shipping', name: 'Shipping' },
  ];

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50">
        <Navigation />
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="text-center py-12">
            <div className="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
            <p className="mt-4 text-gray-600">Loading job details...</p>
          </div>
        </div>
      </div>
    );
  }

  if (!job) {
    return (
      <div className="min-h-screen bg-gray-50">
        <Navigation />
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="text-center py-12">
            <p className="text-gray-600">Job not found</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <Navigation />

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Error Display */}
        {error && (
          <div className="mb-6 bg-red-50 border border-red-200 rounded-lg p-4">
            <div className="flex items-center gap-2 text-red-800">
              <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
              </svg>
              <span className="font-semibold">Error:</span> {error}
            </div>
          </div>
        )}

        {/* Header */}
        <div className="mb-8">
          <div className="flex justify-between items-start">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">{job.jobNo}</h1>
              <p className="mt-2 text-sm text-gray-600">{getCustomerName(job.customer)}</p>
            </div>
            <div className="flex gap-3">
              <span className="px-3 py-1 bg-purple-100 text-purple-800 rounded-full text-sm font-semibold">
                {job.status.replace(/_/g, ' ')}
              </span>
              <span className="text-2xl font-bold text-gray-900">${Number(job.customerTotal).toFixed(2)}</span>
            </div>
          </div>
        </div>

        {/* Tabs */}
        <div className="border-b border-gray-200 mb-6">
          <nav className="-mb-px flex space-x-8">
            {tabs.map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`${
                  activeTab === tab.id
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm flex items-center gap-2`}
              >
                {tab.name}
                {tab.badge && (
                  <span className="bg-gray-100 text-gray-900 rounded-full px-2 py-0.5 text-xs">
                    {tab.badge}
                  </span>
                )}
              </button>
            ))}
          </nav>
        </div>

        {/* Tab Content */}
        {activeTab === 'details' && (
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <div className="bg-white shadow rounded-lg p-6">
              <h2 className="text-lg font-medium text-gray-900 mb-4">Specifications</h2>
              <dl className="space-y-3">
                {Object.entries(job.specs).map(([key, value]) => (
                  <div key={key} className="flex justify-between">
                    <dt className="text-sm font-medium text-gray-500 capitalize">{key}</dt>
                    <dd className="text-sm text-gray-900">{value}</dd>
                  </div>
                ))}
              </dl>
            </div>

            <div className="bg-white shadow rounded-lg p-6">
              <h2 className="text-lg font-medium text-gray-900 mb-4">Timeline</h2>
              <div className="flow-root">
                <ul className="-mb-8">
                  <li className="relative pb-8">
                    <div className="relative flex space-x-3">
                      <div>
                        <span className="h-8 w-8 rounded-full bg-green-500 flex items-center justify-center ring-8 ring-white">
                          <svg className="h-5 w-5 text-white" fill="currentColor" viewBox="0 0 20 20">
                            <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                          </svg>
                        </span>
                      </div>
                      <div className="min-w-0 flex-1 pt-1.5 flex justify-between space-x-4">
                        <div>
                          <p className="text-sm text-gray-500">Job created</p>
                        </div>
                        <div className="text-right text-sm whitespace-nowrap text-gray-500">
                          {new Date(job.createdAt).toLocaleString()}
                        </div>
                      </div>
                    </div>
                  </li>
                  <li className="relative pb-8">
                    <div className="relative flex space-x-3">
                      <div>
                        <span className="h-8 w-8 rounded-full bg-blue-500 flex items-center justify-center ring-8 ring-white">
                          <svg className="h-5 w-5 text-white" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z" />
                            <path fillRule="evenodd" d="M4 5a2 2 0 012-2 3 3 0 003 3h2a3 3 0 003-3 2 2 0 012 2v11a2 2 0 01-2 2H6a2 2 0 01-2-2V5zm3 4a1 1 0 000 2h.01a1 1 0 100-2H7zm3 0a1 1 0 000 2h3a1 1 0 100-2h-3zm-3 4a1 1 0 100 2h.01a1 1 0 100-2H7zm3 0a1 1 0 100 2h3a1 1 0 100-2h-3z" clipRule="evenodd" />
                          </svg>
                        </span>
                      </div>
                      <div className="min-w-0 flex-1 pt-1.5 flex justify-between space-x-4">
                        <div>
                          <p className="text-sm text-gray-500">Auto PO created (Impact → Bradford)</p>
                        </div>
                        <div className="text-right text-sm whitespace-nowrap text-gray-500">
                          2 hours ago
                        </div>
                      </div>
                    </div>
                  </li>
                </ul>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'proofs' && (
          <div className="space-y-6">
            <div className="bg-white shadow rounded-lg p-6">
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-lg font-medium text-gray-900">Proofs</h2>
                <button className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700">
                  Upload New Proof
                </button>
              </div>

              <div className="space-y-4">
                {proofs.length === 0 ? (
                  <div className="text-center py-8 text-gray-500">
                    No proofs uploaded yet
                  </div>
                ) : (
                  proofs.map((proof) => {
                    const comments = proof.approvals?.[0]?.comments;
                    return (
                      <div key={proof.id} className="border border-gray-200 rounded-lg p-4">
                        <div className="flex justify-between items-start">
                          <div className="flex-1">
                            <div className="flex items-center gap-3">
                              <h3 className="font-medium text-gray-900">Version {proof.version}</h3>
                              <span className={`px-2 py-1 rounded-full text-xs font-semibold ${
                                proof.status === 'PENDING' ? 'bg-yellow-100 text-yellow-800' :
                                proof.status === 'APPROVED' ? 'bg-green-100 text-green-800' :
                                'bg-red-100 text-red-800'
                              }`}>
                                {proof.status.replace(/_/g, ' ')}
                              </span>
                            </div>
                            <p className="text-sm text-gray-600 mt-1">{proof.file?.fileName || 'Unknown file'}</p>
                            <p className="text-xs text-gray-500 mt-1">
                              {new Date(proof.createdAt).toLocaleString()}
                            </p>
                            {comments && (
                              <p className="text-sm text-gray-700 mt-2 bg-yellow-50 p-2 rounded">
                                <span className="font-semibold">Comments:</span> {comments}
                              </p>
                            )}
                          </div>
                          {proof.status !== 'APPROVED' && (
                            <div className="flex gap-2">
                              <button
                                onClick={() => handleApproveClick(proof)}
                                className="px-3 py-1 bg-green-600 text-white text-sm rounded hover:bg-green-700"
                              >
                                Approve
                              </button>
                              <button
                                onClick={() => handleRequestChangesClick(proof)}
                                className="px-3 py-1 bg-red-600 text-white text-sm rounded hover:bg-red-700"
                              >
                                Request Changes
                              </button>
                            </div>
                          )}
                        </div>
                      </div>
                    );
                  })
                )}
              </div>
            </div>
          </div>
        )}

        {activeTab === 'files' && (
          <div className="bg-white shadow rounded-lg p-6">
            <h2 className="text-lg font-medium text-gray-900 mb-4">Files</h2>
            <p className="text-gray-500">No files uploaded yet</p>
          </div>
        )}

        {activeTab === 'pos' && (
          <div className="bg-white shadow rounded-lg p-6">
            <h2 className="text-lg font-medium text-gray-900 mb-4">Purchase Orders</h2>
            {purchaseOrders.length === 0 ? (
              <div className="text-center py-8 text-gray-500">
                No purchase orders yet
              </div>
            ) : (
              <div className="space-y-4">
                {purchaseOrders.map((po) => (
                  <div key={po.id} className="border border-gray-200 rounded-lg p-4">
                    <div className="flex justify-between items-start">
                      <div>
                        <h3 className="font-medium text-gray-900">
                          {po.originCompany.name} → {po.targetCompany.name}
                        </h3>
                        <p className="text-sm text-gray-600 mt-1">Auto-generated PO</p>
                        <p className="text-xs text-gray-500 mt-1">
                          Status: <span className="font-semibold">{po.status}</span>
                        </p>
                        <p className="text-xs text-gray-500">
                          Created: {new Date(po.createdAt).toLocaleDateString()}
                        </p>
                      </div>
                      <div className="text-right">
                        <p className="text-lg font-semibold text-gray-900">
                          ${Number(po.vendorAmount).toFixed(2)}
                        </p>
                        <p className="text-sm text-gray-500">
                          Margin: ${Number(po.marginAmount).toFixed(2)}
                        </p>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}

        {/* Approval Modal */}
        {showApprovalModal && selectedProof && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
              <div className="px-6 py-4 border-b border-gray-200">
                <h2 className="text-xl font-semibold text-gray-900">Approve Proof</h2>
              </div>
              <div className="px-6 py-4">
                <p className="text-gray-700 mb-4">
                  Are you sure you want to approve <span className="font-semibold">Version {selectedProof.version}</span>?
                </p>
                <div className="bg-blue-50 border border-blue-200 rounded p-3">
                  <p className="text-sm text-blue-800">
                    <span className="font-semibold">Note:</span> Approving this proof will move the job forward in the production workflow.
                  </p>
                </div>
              </div>
              <div className="px-6 py-4 border-t border-gray-200 flex justify-end gap-3">
                <button
                  onClick={() => setShowApprovalModal(false)}
                  className="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50"
                >
                  Cancel
                </button>
                <button
                  onClick={handleConfirmApproval}
                  className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  Approve Proof
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Request Changes Modal */}
        {showChangesModal && selectedProof && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
              <div className="px-6 py-4 border-b border-gray-200">
                <h2 className="text-xl font-semibold text-gray-900">Request Changes</h2>
              </div>
              <div className="px-6 py-4">
                <p className="text-gray-700 mb-4">
                  Request changes for <span className="font-semibold">Version {selectedProof.version}</span>
                </p>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    What changes are needed?
                  </label>
                  <textarea
                    value={changeComments}
                    onChange={(e) => setChangeComments(e.target.value)}
                    rows={4}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-transparent"
                    placeholder="Please describe the changes needed..."
                  />
                </div>
              </div>
              <div className="px-6 py-4 border-t border-gray-200 flex justify-end gap-3">
                <button
                  onClick={() => setShowChangesModal(false)}
                  className="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50"
                >
                  Cancel
                </button>
                <button
                  onClick={handleSubmitChanges}
                  className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700"
                >
                  Submit Changes
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
